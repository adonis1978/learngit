
git常用命令

安装git后的基本配置：
git config --global user.name "Your Name"
git config --global user.email "email@example.com"

mkdir learngit 创建测试目录
cd learngit 切换到新创建的learngit目录
pwd 显示当前目录(如: /c/Documents and Settings/Administrator/learngit)

把learngit目录变成Git可管理的仓库(即初始化一个git仓库)：
git init
(显示如：Initialized empty Git repository in /Users/michael/learngit/.git/)
(git init命令会在项目文件夹中生成一个名为".git"的隐藏目录，它就是git版本库，它将记录仓库中所有文件的修改历史。切勿修改其中的文件以免破坏仓库)

切换到项目目录并初始化该项目的git版本库：
cd d:/xampp/htdocs/project
git init
(在实际工作中，你的项目文件夹可能存在于电脑上的任意位置，如 D:/xampp/htdocs/project，我们需要先切换到项目文件夹才能初始化它的版本库)

把文件添加到版本库需要两步，第一步是：
git add readme.txt
(readme.txt是手工在learngit目录中新建的一个用于测试的文件，可随意输入几行内容)

第二步是：
git commit -m "wrote a readme file" (-m "***"是提交时的备注说明)
显示如：
[master (root-commit) cb926e7] wrote a readme file
 1 file changed, 2 insertions(+)
 create mode 100644 readme.txt
 (git commit命令执行成功后会提示，1个文件被改动(新添加的readme.txt文件),插入了两行内容(readme.txt有两行内容))

可一次提交多个文件到版本库：
git add file1.txt
git add file2.txt
git add file3.txt
git commit -m "add 3 files."

添加目录中的所有文件到版本库：
git add .

查看版本库当前状态：
git status

修改文件后查看修改了哪些地方：
git diff readme.txt

提交修改也分两步，第一步也是：
git add readme.txt

第二步是：
git commit -m "提交说明"

查看提交历史(按字母"q"键退出查看log状态)：
git log

以简洁方式查看提交历史(仅显示一行信息而隐藏提交用户和提交时间)：
git log --pretty=oneline

版本回退(HEAD代表当前版本)：
git reset --hard HEAD^  回退到上一个版本
git reset --hard HEAD^^  回退到上上个版本
git reset --hard HEAD~100  回退到上100个版本
git reset --hard commit_id(即commit id)

*回退前用 git log 命令查看提交历史以确定要回退到哪个版本(版本号/即commit id)
*要回到未来某个版本时，先用 git reflog 命令查看命令历史以确定要回到未来哪个版本

在git add后取消add操作(即从暂存区中删除已add到其中的修改)：
git reset HEAD readme.txt

在工作区修改完文件后取消此修改：
git checkout -- readme.txt
(场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步走，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，用版本回退命令，不过前提是没有推送到远程库)

查看工作区和版本库的区别：
git diff HEAD -- readme.txt

查看文件的内容：
cat readme.txt

从工作区删除文件：
rm readme.txt

如果从工作区误删了某个文件(手工在文件管理器中删除或使用 rm file 命令删除)，想恢复该文件：
git checkout -- file

如果真想删除某个文件：
git rm file
git commit -m "remove file"


--------以下为 github 操作(在继续阅读之前请注册GitHub账号/网址是github.com)---------

一. 创建并添加SSH Key。因为本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以需要做如下设置——

第1步 在本地创建SSH Key：
在本地用户主目录下(如C:\Documents and Settings\Administrator)，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了可直接 跳到下一步。如果没有，打开Git Bash，创建SSH Key：

$ ssh-keygen -t rsa -C "lsokweb@gmail.com"

(邮件地址换成自己的，然后一路回车，使用默认值即可，无需设置密码。如果顺利可以在用户主目录下找到.ssh目录，其中有id_rsa和id_rsa.pub两个文件，这两个文件就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，后面会把它添加到github中。


第2步 将公钥复制到github：
登陆GitHub帐户，“Settings”—“SSH Keys”，点击“New SSH Key”，填上任意Title(如“家里”)，在文本框中粘贴本地id_rsa.pub文件的内容。

(GitHub允许你添加多个Key，假定你有多台电脑，有时在公司电脑上提交，有时在家里电脑上提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub提交了。公钥和私钥的工作原理是，公钥和私钥是一个“密钥对”，提交时，你电脑里的私钥会和github上的公钥配对，如果匹配成功则允许提交，否则就无法提交，目的就是保证只有合法用户才能提交)


二. 添加远程库并把本地仓库推送到远程库
远程库有两个作用，一是可以备份本地仓库(也就是备份整个项目)，另一个是与其它人协作共同开发。将本地仓库(如learngit)添加到github远程仓库需要两步，第一步是在github上创建一个新仓库(命名为learngit)并把本地的learngit仓库与之关联，第二步是将本地仓库的数据推送到远程仓库：

第1步：在github创建新仓库并将本地仓库与之关联：
登录github帐户，"Create New repository"，"Repository name"填写"learngit"，"Description"可填写"git学习"，其它选项保持默认，点击"Create repository"按钮。

打开git bash并切换到learngit目录，将本地learngit仓库与刚创建的github仓库相关联：
git remote add origin https://github.com/你的github帐号/learngit.git


第2步：将本地learngit仓库推送到远程仓库：
git push -u origin master
(注意：因为远程库是空的，第一次推送时必须加 -u 参数。推送完成后可看到github远程库中的内容已和本地仓库一致)

以后每次需要推送时，使用命令：
git push origin master


三. 从远程库克隆
如果新开始一个项目，建议先创建远程库，然后每个项目成员都从远程库克隆一份到自己的电脑。

第1步：在github创建一个新仓库(这里命名为"gitskills")

第2步：执行克隆命令:
git clone https://github.com/你的github帐号/gitskills.git
(克隆的仓库会克隆到哪里呢？如果在执行git clone命令时不指定其它参数，克隆的仓库会克隆到用户主目录中，如 C:/Documents and Settings/Administrator)

*如需指定克隆目录(即克隆到哪个目录)，命令格式为：
git clone 远程库网址 本地目录
实际命令类似如下：
git clone https://github.com/你的gthub帐号/gitskills.git d:/xampp/htdocs/gitskills
(注意，此时d:/xampp/htdocs里并没有gitskills这个目录，执行克隆命令后会自动创建它)


四. 分支管理










附：几个常用命令的详细解释——
http://www.ruanyifeng.com/blog/2014/06/git_remote.html
(git clone、git remote、git fetch、git pull、git push)